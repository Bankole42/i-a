---
export interface Props {
	id: string,
	title: string,
	status: string,
	description: string,
	url: {
		href: string,
		text: string
	}
}

const {
	id,
	title,
	status,
	description,
	url,
} = Astro.props

---

<div class="project">
	<div class="project-cover">
			{url ? (
			<a href={ url?.href } target="_blank">
				<img src={`/assets/images/projects/${id}.jpg`} alt={`Cover image for ${title}`} />
			</a>
			) : (
				<img class="pulse" src={`/assets/images/projects/${id}.jpg`} alt={`Cover image for ${title}`} />
			)}
	</div>
	<div class="project-text">
		<div class="body">
			<h2>
			{url ? (
				<a href={ url.href } target="_blank">{title}</a>
			) : (
				<span>{title}</span>
			)}
			</h2>
			<p>{ description }</p>
		</div>
		<div class="footer">
			<div class="project-status">
				<span class={`project-status-dot ${status == 'published' ? 'success' : 'default' }`}></span>
				<span class="project-status-text">{status}</span>
			</div>
			{url && (
			<a href={ url?.href } class="c-link c-link--out" target="_blank">{ url.text }</a>
			)}
		</div>
	</div>
</div>

<style lang="scss">
	@import "../styles/mixins.scss";

	.project {
		display: grid;
		gap: 24px;
		text-decoration: none;
		grid-template-columns: 1fr minmax(auto, 320px);

		@include screen('small') {
			grid-template-columns: 1fr;
		}

		&-cover {
			position: relative;
			width: 100%;
			min-width: 300px;
			height: 100%;
			aspect-ratio: 616 / 400;
			display: flex;

			> a {
				display: block;
				width: 100%;
				height: 100%;

				>img {
					width: 100%;
					height: 100%;
					object-fit: cover;
				}
			}

			img {
    		transition: all .5s ease;

				&:hover {
					transform: scale(1.03);
				}

				&.pulse {
					transform: scale(1);
					&:hover {
						animation: scaleOnce .5s linear;
					}
				}

				@keyframes scaleOnce {
					0%, 100% { transform: scale(1); }
					50% { transform: scale(1.015); }
				}
			}

			@include screen('small') {
				min-width: unset;
				max-width: 100%;
			}
		}

		&-text {
			display: flex;
			flex-direction: column;
			justify-content: space-between;
			gap: 32px;

			h2,
			h5 {
				display: inline-flex;

				.icon {
					display: none;
					font-size: inherit;
				}

				a {
					font-style: normal;
				}
			}

			h2 {
				font-family: var(--font-sans);
			}

			h5 {
				font-size: 3.2rem;
				font-weight: normal;
			}

			p {
				font-size: var(--font-size-base);
			}

			.footer {
				padding-block-end: 28px;
				margin-block-end: 0;
				position: relative;

				&::after {
					--divider-height: 16px;
					content: '';
					position: absolute;
					bottom: 0;
					left: 0;
					right: 0;
					height: var(--divider-height);
					background: linear-gradient(90deg, var(--color-light-gray) 50%, transparent 50%, transparent 100%),
						linear-gradient(90deg, transparent 50%, var(--color-light-gray) 50%, var(--color-light-gray) 100%);
					background-position: 0 0, 0 calc(var(--divider-height) / 2);
					background-size: var(--divider-height) 50%;
					background-repeat: repeat no-repeat;
					// animation: none;
					transition: background-size .35s linear;

					@keyframes animatedBackground {

						to {
							background-position: 32px 0, 32px calc(var(--divider-height) / 2);
						}
					}
				}

				p {
					position: relative;
					margin-bottom: 10px;
				}

				a {
					font-style: italic;
				}
			}
		}

		&:hover {
			.footer {
				&::after {
// 					animation: animatedBackground .35s linear infinite both;
				}
			}
		}

		&-status {
			margin-bottom: 5px;

			&-dot {
				width: 8px;
				height: 8px;
				border-radius: 4px;
				margin-right: 2px;
				display: inline-block;
				&.default {
					background: #FB9F1A;
				}
				&.success {
					background: #5AB379;
				}
			}

			&-text {
				font-family: var(--font-sans-mono);
				text-transform: uppercase;
				font-size: 1.5rem;
			}
		}
	}
</style>
