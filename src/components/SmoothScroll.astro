<style is:global>
    .is-scrolling{
        scroll-snap-type: none !important;
    }
</style>
<script is:inline>
    const easings = {
        linear(t) {
            return t;
        },
        easeInQuad(t) {
            return t * t;
        },
        easeOutQuad(t) {
            return t * (2 - t);
        },
        easeInOutQuad(t) {
            return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
        },
        easeInCubic(t) {
            return t * t * t;
        },
        easeOutCubic(t) {
            return (--t) * t * t + 1;
        },
        easeInOutCubic(t) {
            return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
        },
        easeInQuart(t) {
            return t * t * t * t;
        },
        easeOutQuart(t) {
            return 1 - (--t) * t * t * t;
        },
        easeInOutQuart(t) {
            return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t;
        },
        easeInQuint(t) {
            return t * t * t * t * t;
        },
        easeOutQuint(t) {
            return 1 + (--t) * t * t * t * t;
        },
        easeInOutQuint(t) {
            return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t;
        }
    };

    const animationStore = {}

    const smoothScroll = ({
        element,
        duration,
        position,
        callback,
        id,
        easing = 'linear',
        handleStopScroll
    }) => {
        //If the current element is being animated by another instance cancel the animation frame
        if(animationStore[id]){
            cancelAnimationFrame(animationStore[id])
            animationStore[id] = null
        }

        const initialPosition = {
            x: element.scrollLeft,
            y: element.scrollTop
        };

        const distanceToScroll = {
            x: position.x - initialPosition.x,
            y: position.y - initialPosition.y
        }

        let startTime;

        element.classList.add('is-scrolling')

        const stopScroll = () => {
            startTime = undefined
            cancelAnimationFrame(animationStore[id])
            animationStore[id] = null

            element.classList.remove('is-scrolling')

            callback()
            handleStopScroll && handleStopScroll()
        }

        //If the user tries to interact with the scrolling element then give them control
        element.addEventListener("wheel", stopScroll)
        element.addEventListener("mousedown", stopScroll)
        element.addEventListener("touchstart", stopScroll)


        const scroll = (currentTime) => {
            if(startTime === undefined){
                //Store start time
                startTime = currentTime;
            }

            const elapsedTimeInSeconds = (currentTime - startTime) / 1000;
            
            const elapsedTimeRatio = Math.min(1, elapsedTimeInSeconds / duration);

            //Apply easing
            const elapsedTimeFunction = easings[easing](elapsedTimeRatio);

            //Calculate final position based on time function and distance to travel
            const finalPosition = {
                x: (elapsedTimeFunction * distanceToScroll.x) + initialPosition.x,
                y: (elapsedTimeFunction * distanceToScroll.y) + initialPosition.y,
            }
            element.scrollTo(finalPosition.x, finalPosition.y)

            if(element.scrollLeft === position.x){
                //If we have reached the end call the callback and reset start time
                callback()
                startTime = undefined
                element.classList.remove('is-scrolling')

                element.removeEventListener("wheel", stopScroll)
                element.removeEventListener("mousedown", stopScroll)
                element.removeEventListener("touchstart", stopScroll)

                return
            }

            animationStore[id] = requestAnimationFrame(scroll)
        }

        //Animation loop
        animationStore[id] = requestAnimationFrame(scroll);
    }

</script>