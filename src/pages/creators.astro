---
//Components
import Layout from "@layout/Default.astro";
import PageHeader from "@components/PageHeader.astro";
import Checkbox from "@components/FormInputCheckbox.astro";
import ProfileCard from "@components/profileCard.astro";

import projects from "@data/projects.json";
import roles from "@data/roles.json";
import genre from "@data/genre.json";
import creators from "@data/creators.json";

const getProjectsFilter = () => {
  return projects.map(({ id, title }) => ({ id, label: title } ))
}

const fetchCreators = creators.map((creator) => {
  const { roleId, projectIds, ...rest } = creator;
  return {
    ...rest,
    role: roles.find(({ id }) => roleId === id),
    projects: projectIds.filter(({ id }) => projectIds === id ),
  }
})
 

const filters = [
  {
    title: 'Genre',
    data: genre,
  },
  {
    title: 'Roles',
    data: roles,
  },
  {
    title: 'Projects',
    data: [
      {
        id: 'all',
        label: 'All'
      },
      ...getProjectsFilter()
    ],
  },
]

---
<Layout
	pageTitle="Wuruwuru"
	pageUrl="https://wuruwuru.com/creators"
	pageImage="https://wuruwuru.com/assets/images/thumbnail.png"
>
	<main>
		<PageHeader/>
		<section class="l-section">
			<div class="l-container l-grid">
				<div class="c-section__left l-grid__column--6">
					<h4 class="c-section-title">Creators</h4>
					<ul class="c-creator-list">
            {fetchCreators.map(({name, bio, role, socialLink}) => (
              <li class="c-creator-list__item">
                <div class="profile"><ProfileCard title={name} description={role.label} size="small" /></div>
                <div class="bio">{bio}</div>
                <a class="social" href={ socialLink.url }>{ socialLink.text }</a>
              </li>
            ))}
          </ul>
				</div>
				<aside class="c-section__right l-grid__column-start--8 l-grid__column--2" id="filterWrapper">
          {filters.map(({ title, data }) => (
            <h4 class="c-section-title">{title}</h4>
            <ul class="aside-list" data-filterGroup={title.toLowerCase()}>
              {data.map((props, index) => {
                const value = index === 0 ? true : false
                return (
                  <li><Checkbox onClick="console.log('hello')" {...props} value={value} client:load/></li>
                )
              })}
            </ul>
          ))}
				</aside>
			</div>
		</section>
	</main>
</Layout>
<style lang="scss">
	@import "../styles/mixins.scss";

	.c-creator-list,
	.aside-list {
		padding: var(--spacer-base) 0;
	}
	.c-creator-list__item {
    display: grid;
    grid-template-columns: 32% 1fr 14%;
    gap: 24px;
    .social {
      justify-self: flex-end;
      word-break: break-all;
    }

		& + & {
			margin-top: var(--spacer-base);
			margin-block-start: var(--spacer-base);
		}
	}
	.c-section__right {
		@include screen('small') {
			display: none;
		}
	}
	.c-section__left {
		@include screen('small') {
			grid-column: 1 / -1;
		}
	}

	.aside-list	> * + * {
		margin-top: calc(var(--spacer-base) / 6 );
	}

</style>
<script define:vars={{ filters }}>
  // window.creatorFilterOptions = filters.reduce((acc, current) => {
  //   const { title, ...rest } = current;
  //   const _rest = rest.map
  //   return {
  //     ...acc,
  //     [title.toLowerCase()]: {
  //       ...rest
  //     }
  //   }
  // }, {});
  window.creatorFilterOptions = {
    genre: [
      {id: "all", label: "All", active: true},
      {id: "animation", label: "Animation", active: false},
      {id: "music", label: "Music", active: false},
      {id: "writing", label: "Writing", active: false}
    ],
    roles: [
      {id: "all", label: "All", active: true},
      {id: "animator", label: "Animator", active: false},
      {id: "writer", label: "Writer", active: false},
      {id: "graphic_designer", label: "Graphic Designer", active: false},
      {id: "illustrator", label: "Illustrator", active: false},
      {id: "director", label: "Director", active: false},
      {id: "producer", label: "Producer", active: false},
    ],
    projects: [
      {id: "all", label: "All", active: true},
      {id: "j-guide", label: "J Guide", active: false},
      {id: "hanky", label: "Hanky Panky", active: false},
      {id: "feel-good", label: "Feel Good", active: false}
    ]
  };
</script>
<script>
  
  import { createMachine, interpret } from '@xstate/fsm';
  const filterConfig = {
    genre: [
      {id: "all", label: "All", active: true},
      {id: "animation", label: "Animation", active: false},
      {id: "music", label: "Music", active: false},
      {id: "writing", label: "Writing", active: false}
    ],
    roles: [
      {id: "all", label: "All", active: true},
      {id: "animator", label: "Animator", active: false},
      {id: "writer", label: "Writer", active: false},
      {id: "graphic_designer", label: "Graphic Designer", active: false},
      {id: "illustrator", label: "Illustrator", active: false},
      {id: "director", label: "Director", active: false},
      {id: "producer", label: "Producer", active: false},
    ],
    projects: [
      {id: "all", label: "All", active: true},
      {id: "j-guide", label: "J Guide", active: false},
      {id: "hanky", label: "Hanky Panky", active: false},
      {id: "feel-good", label: "Feel Good", active: false}
    ]
  }
  // const filterWrapper = document.getElementById('filterWrapper');
  // filterWrapper.addEventListener('click', function(event) {
  //   console.log(event.target)
  // })


  const idle = {
    on: {
      CLICK: 'loading',
    }
  }
  const loading = {
    entry: ['checkData'],
    on: {
      FILTERCHECK_PASSED: 'success',
      FILTERCHECK_FAILED: 'error',
    }
  }
  const error = {
    on: {
      UPDATE_FILTERS: 'loading'
    }
  }
  const success = {
    on: {
      CLICK: 'loading'
    }
  }
  
  const states = { idle, loading, error, success };
  const options = {
    actions: {
      checkData: (context, event) => {
        // Steps
        // Get property clicked;
        // Validate correctness
        // Copy and toggle value
            // If id == all
              // length is 0 or 1, FILTERCHECK_PASSED
              // length > 1 // FILTERCHECK_FAILED
            // if id !== all
              // length = 1, FILTERCHECK_PASSED
              // length > 1
                // if all is selected as well FILTERCHECK_FAILED
                // else FILTERCHECK_PASSED

        const { filterParent, filterId } = event;
        const { filterConfig } = context;

        const testSample = filterConfig[filterParent];
        testSample[filterId].active = !testSample[filterId].active;

        const activeFilters = testSample.map(element => element.active);
        if (activeFilters.length === 0 || 1) {
          console.log('test passed', filterId)
        } else {
          const allIsActive = activeFilters.indexOf(element => element.id === 'all')
          if(allIsActive) {
            console.log('test failed', filterId)
          } else {
            console.log('test passed', filterId)
          }
        }
        

        // if (current && current.len)
        // console.log(current)
        // console.log('heyy, fetching data');
      }
    }
  }

  const machine = createMachine({
    id: 'creatorFilter',
    initial: 'idle',
    context: {
      filterConfig
    },
    states,
  }, options)

  const toggleService = interpret(machine).start();

  toggleService.subscribe((state) => {
    console.log(state.value, 'subscribe function');
  });
  
  toggleService.send({
    type: 'CLICK',
    filterParent: 'roles',
    filterId: 'all',
    currentValue: true
  });
</script>