---
//Components
import Layout from "@layout/Default.astro";
import PageHeader from "@components/PageHeader.astro";
import Checkbox from "@components/FormInputCheckbox.astro";
import ProfileCard from "@components/ProfileCard.astro";

import projects from "@data/projects.json";
import roles from "@data/roles.json";
import genre from "@data/genre.json";
import creators from "@data/creators.json";

const getProjectsFilter = () => {
  return projects.map(({ id, title }) => ({ id, label: title }))
}

const fetchCreators = creators.map((creator) => {
  const { roleId, projectIds, ...rest } = creator;
  return {
    ...rest,
    role: roles.find(({ id }) => roleId === id),
    projects: projectIds.map(projectID => {
      const { id, category } = projects.find(({ id }) => id === projectID)
      return { id, genre: category.toLowerCase() };
    }),
  }
})

const filters = [
  {
    title: 'Genre',
    data: genre,
  },
  {
    title: 'Roles',
    data: roles,
  },
  {
    title: 'Projects',
    data: [
      {
        id: 'all',
        label: 'All'
      },
      ...getProjectsFilter()
    ],
  },
]

const header = {
  title: 'is a artist collective.',
  description: 'We bring excellent directors and talented creators together to produce big ideas and create locally relevant documentation for other artists.'
}

---

<Layout pageTitle="wuruwuru" pageUrl="https://wuruwuru.com/creators"
  pageImage="https://wuruwuru.com/assets/images/thumbnail.png">
  <main>
    <PageHeader {...header} />
    <section class="l-section">
      <div class="l-container l-grid">
        <div class="c-section__left l-grid__column--6">
          <h4 class="c-section-title c-section-title--spaced">Creators<span class="mobile-filter-button"><button
                class="filter-trigger" id="filterTrigger">Filter</button></span></h4>
          <ul class="c-creator-list" id="creators">
            {fetchCreators.map(({name, bio, role, socialLink, projects, avatar}, index) => {
            const projectSpread = projects.map(({ id })=> id);
            const genreSpread = projects.map(({ genre })=> genre);
            return (
            <li class="c-creator-list__item active" data-index={index} data-roles={role.id.toLowerCase()}
              data-projects={projectSpread} data-genre={genreSpread}>
              <div class="profile">
                <ProfileCard title={name} imageLink={avatar} description={role.label} size="small" />
              </div>
              <div class="bio">{bio}</div>
              <a class="social" href={ socialLink.url }>{ socialLink.text }</a>
            </li>)}
            )}
          </ul>
        </div>

        <aside class="c-section__right l-grid__column-start--8 l-grid__column--2">
          <form id="filterWrapperDesktop">
            <!-- Select for mobile view -->
            {filters.map(({ title, data }) => (
            <fieldset class="aside-list" data-filterGroup={title.toLowerCase()}>
              <legend>
                <h4 class="c-section-title">{title}</h4>
              </legend>
              {data.map((props, index) => {
              const value = index === 0 ? true : false
              return (<div class="item">
                <Checkbox {...props} value={value} client:load />
              </div>)
              })}
            </fieldset>
            ))}
          </form>
        </aside>
      </div>
    </section>
    <dialog class="c-filter-dialog" id="filterDialog">
      <form>
        <div class="l-container">
          <h3>Filters</h3>
          <div class="c-section__filters">
            {filters.map(({ title, data }) => (
            <fieldset class="aside-list" data-filterGroup={title.toLowerCase()}>
              <legend>
                <h4 class="c-section-title">{title}</h4>
              </legend>
              {data.map((props, index) => {
              const value = index === 0 ? true : false
              return (<div class="item">
                <Checkbox {...props} value={value} client:load />
              </div>)
              })}
            </fieldset>
            ))}
          </div>
        </div>
        <div class="c-button-wrap">
          <button type="submit" class="c-button" id="filterDialogSubmit">Filter</button>
        </div>
      </form>
    </dialog>
  </main>
</Layout>
<style lang="scss">
  @import "../styles/mixins.scss";

  .c-section-title {
    &--spaced {
      display: flex;
      align-items: center;
      justify-content: space-between;

      button {
        background: transparent;
        border: none;
      }
    }
  }

  .c-filter-dialog {
    position: fixed;
    width: 100%;
    border: 0;
    top: 5vh;
    height: 95vh;
    background: var(--color-white);
    left: 0;
    overflow-y: scroll;
    z-index: var(--z-index--10);
    padding: calc(var(--spacer-base) / 2) 0;
    padding-top: 0;
    padding-block-start: 0;

    .c-button {
      width: 100%;
      background: var(--color-white);
      padding: 12px;
      border: 1px solid var(--color-black);
      color: var(--color-black);

      &-wrap {
        position: sticky;
        bottom: 0;
        max-width: 80%;
        margin: 0 auto;
      }
    }

    &::backdrop {
      background: red;
    }

    h3 {
      background-color: var(--color-white);
      padding: 12px 0 calc(var(--spacer-base) / 2);

      z-index: var(--z-index--10);
    }

    /* autoprefixer: ignore next */
    &:-internal-modal-dialog {
      max-width: calc((100% - 6px) - 2em);
      max-height: calc((100% - 6px) - 2em);
      max-width: 100%;
    }

  }

  .mobile-filter-button {
    display: none;

    @include screen("small") {
      display: block;
    }
  }

  .c-section-title,
  .aside-list legend {
    background-color: var(--color-white);
  }

  .l-container,
  .l-grid {
    position: relative;
  }

  .c-creator-list,
  .aside-list {
    padding: var(--spacer-base) 0;

    @include screen('small') {
      padding: calc(var(--spacer-base) / 2) 0;
      grid-template-columns: 1fr;
    }
  }

  .c-creator-list__item {
    display: grid;
    grid-template-columns: 32% 1fr 14%;
    gap: 24px;
    margin-bottom: var(--spacer-base);
    margin-block-end: var(--spacer-base);

    &:last-of-type {
      margin-bottom: 0;
      margin-block-end: 0;
    }

    .social {
      justify-self: flex-end;
      word-break: break-all;
    }

    @include screen('small') {
      grid-template-columns: 1fr;
      width: 100%;
      padding: calc(var(--spacer-base) / 4);
      box-shadow: 0px 0px 1px 0px hsla(210, 7%, 28%, 0.32);
      background-color: var(--color-white);

      margin-bottom: calc(var(--spacer-base) / 4);
      margin-block-end: calc(var(--spacer-base) / 4);


      .bio {
        display: none;
      }

      .social {
        display: none;
      }
    }
  }

  fieldset {
    border: none;

    legend {
      padding: 0;
      margin: 0;
      width: 100%;
    }
  }

  .c-section__right {
    @include screen('small') {
      display: none;
    }

    select {
      display: none;

      @include screen('small') {
        display: unset;
        display: none;
      }
    }
  }

  .c-section__left {
    @include screen('small') {
      grid-column: 1 / -1;
    }
  }

  .aside-list>.item+* {
    margin-top: calc(var(--spacer-base) / 6);
  }
</style>
<script define:vars={{ filters }}>
  window.creatorFilterOptions = filters.reduce((acc, filter, index) => {
    const { title, data } = filter;
    const filterGroup = title.toLowerCase();
    const filterGroupData = data.reduce((acc, { id, label }, index) => {
      const active = index === 0 ? true : false
      return {
        ...acc,
        [id.toLowerCase()]: {
          label,
          active,
        }
      }
    }, {})

    return {
      ...acc,
      [filterGroup]: {
        ...filterGroupData
      },
    }
  }, {});
</script>
<script>
  import { assign, createMachine, interpret } from '@xstate/fsm';
  import Isotope from 'isotope-layout';

  // Use Isotope to control filtered items
  const creatorIsotope = new Isotope(document.getElementById('creators'), {
    itemSelector: '.c-creator-list__item',
  });


  // Helpers
  const updateCheckboxUI = (parent, value, key = 'all') => {
    const filterGroup = document.querySelectorAll(`fieldset[data-filtergroup='${parent}']`);
    filterGroup.forEach(group => {
      group.querySelector(`div input[name='${key}']`).checked = value;
    });
  }

  const updateSelectUI = (parent, value, key = 'all') => {
    const filterGroup = document.querySelector(`select [data-filtergroup='${parent}']`);
    filterGroup.querySelector(`option[value='${key}']`).selected = value;
  }

  const updateJSONOnClick = (data, filterId, parent) => {
    // Turn off all filters is user selects all
    if (filterId === 'all') {
      for (const key of Object.keys(data)) {
        if (key !== 'all') {
          data[key]['active'] = false;
        }
      }
      return data;
    }

    data['all']['active'] = false;

    return data;
  }

  const updateUI = (data) => {
    const testParam = Object.keys(data).reduce((acc, element) => {
      const targetObj = data[element];
      const targetKeys = Object.keys(targetObj);
      const answers = [];

      targetKeys.forEach(key => {
        if (targetObj[key]['active']) answers.push(key)
      });

      return {
        ...acc,
        [element]: answers
      }
    }, {})


    const filterQuery = (element) => {
      const answer = [];
      for (const key of Object.keys(testParam)) {
        const attributeText = element.getAttribute(`data-${key}`);
        if (testParam[key].includes(attributeText) || testParam[key].includes('all')) {
          answer.push(true)
        } else {
          answer.push(false)
        }
      }

      const checkTrue = answer.every(element => element)
      return checkTrue
    }

    creatorIsotope.arrange({
      filter: filterQuery
    })
  }


  const options = {
    actions: {
      handleContext: assign({
        filterState: (context, event) => {
          const { filterState } = context;
          const { filterParent, filterId } = event;

          const filteredGroup = {
            ...filterState[filterParent],
            [filterId]: {
              ...filterState[filterParent][filterId],
              active: !filterState[filterParent][filterId]['active'] // update changed json
            }
          }

          const purifiedJSON = updateJSONOnClick(filteredGroup, filterId, filterParent);

          for (const key in purifiedJSON) {
            // updateUI
            const { active } = purifiedJSON[key];
            updateCheckboxUI(filterParent, active, key)
            // updateSelectUI(filterParent, active, key)
          }
          return {
            ...filterState,
            [filterParent]: {
              ...purifiedJSON
            }
          }
        }
      }),
    }
  }


  // State Machine
  const machine = createMachine({
    id: 'creatorFilter',
    initial: 'idle',
    context: {
      filterState: window.creatorFilterOptions,
    },
    states: {
      idle: {
        on: { CLICK: 'selected' }
      },
      selected: {
        entry: ['handleContext',],
        on: { CLICK: 'selected' }
      }
    },
  }, options)

  const toggleService = interpret(machine).start()
  toggleService.subscribe((state) => {
    if (state && state.changed) {
      const { filterState } = state.context;
      updateUI(filterState)
    }
  })



  // Trigger machine event
  const getFilterParam = (fieldType, element) => {
    switch (fieldType) {
      case 'multi-select':
        return {
          filterParent: element.options[element.selectedIndex].parentNode.getAttribute('data-filtergroup'),
          filterId: element.value
        }

      default:
        return {
          filterParent: element.closest('[data-filtergroup]').getAttribute('data-filtergroup'),
          filterId: element.getAttribute('name')
        }
    }
  }

  const toggleDialog = (display = 'hide') => {
    const dialogElement = document.querySelector('#filterDialog');
    dialogElement.scrollTop = 0;

    if (display === 'show') {
      dialogElement.show();
      document.body.style.overflow = 'hidden'
      return;
    }

    dialogElement.close();
    document.body.style.overflow = null

  }

  // Event Listeners
  document.querySelector('#filterWrapperDesktop')
    .addEventListener('input', (event) => {
      if (event.target.nodeName == 'SELECT') return;
      const { filterId, filterParent } = getFilterParam('input', event.target);
      toggleService.send({ type: 'CLICK', filterParent, filterId });
    }, false)

  document.querySelector('#filterDialog')
    .addEventListener('input', (event) => {
      console.log('clicked')
      if (event.target.nodeName == 'SELECT') return;
      const { filterId, filterParent } = getFilterParam('input', event.target);
      toggleService.send({ type: 'CLICK', filterParent, filterId });
    }, false)

  document.querySelector('#filterTrigger').addEventListener('click', () => toggleDialog('show'))
  document.querySelector('#filterDialogSubmit').addEventListener('click', () => toggleDialog('hide'))
</script>